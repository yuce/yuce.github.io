<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>yüce's blog</title><link href="http://yuce.me/" rel="alternate"></link><link href="http://yuce.me/feeds/all.atom.xml" rel="self"></link><id>http://yuce.me/</id><updated>2014-11-19T00:00:00+02:00</updated><entry><title>Erlang File Upload</title><link href="http://yuce.me/erlang-file-upload.html" rel="alternate"></link><updated>2014-11-19T00:00:00+02:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2014-11-19:erlang-file-upload.html</id><summary type="html">&lt;p&gt;Here's an Erlang file upload example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="ni"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nf"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;FieldName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;BinFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list_to_binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nv"&gt;BinFieldName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list_to_binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;FieldName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nv"&gt;Boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Uploader&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Content-Disposition: form-data; name=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nv"&gt;BinFieldName&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;; filename=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;BinFileName&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Content-Type: application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="nv"&gt;Binary&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Boundary&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nv"&gt;CRLF&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;ContentType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;multipart/form-data; boundary=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="nv"&gt;Boundary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nn"&gt;httpc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nv"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="erlang"></category><category term="http"></category><category term="file upload"></category></entry><entry><title>ReportLab on OSX</title><link href="http://yuce.me/reportlab-on-osx.html" rel="alternate"></link><updated>2012-11-03T00:00:00+02:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2012-11-03:reportlab-on-osx.html</id><summary type="html">&lt;p&gt;It's easy to compile &lt;a href="http://www.reportlab.com/"&gt;ReportLab&lt;/a&gt; on OSX (&lt;em&gt;in my case, 10.8&lt;/em&gt;). The only problem is, you'll get the following warning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# installing without freetype no ttf, sorry!
# You need to install a static library version of the freetype2 software
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't try to &lt;code&gt;brew&lt;/code&gt; it yet. OSX already has freetype2 installed. We just need to help ReportLab installer to help find it.&lt;/p&gt;
&lt;p&gt;Download ReportLab, and insert the following lines around after line 104 (after &lt;code&gt;# attempt to make sure we pick freetype2 over other versions&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aDir(I, &amp;quot;/usr/X11/include&amp;quot;) 
aDir(L, &amp;quot;/usr/X11/lib&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remove the &lt;code&gt;build&lt;/code&gt; directory (&lt;em&gt;if it already exists&lt;/em&gt;) and do &lt;code&gt;python setup.py build&lt;/code&gt; as usual. It should work.&lt;/p&gt;</summary><category term="python"></category><category term="reportlab"></category><category term="freetype2"></category><category term="osx"></category><category term="tip"></category></entry><entry><title>Prometheus - The Movie</title><link href="http://yuce.me/prometheus-the-movie.html" rel="alternate"></link><updated>2012-06-11T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2012-06-11:prometheus-the-movie.html</id><summary type="html">&lt;p&gt;Scenario: a grocery store&lt;/p&gt;
&lt;p&gt;A WOMAN approaches you as you carefully appreciate the sodium content of a can of beans.&lt;/p&gt;
&lt;p&gt;WOMAN: That can of beans is going to kill Earth!&lt;/p&gt;
&lt;p&gt;YOU: My God!&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;you proceed to bludgeon your forehead with the can of beans until you knock yourself unconscious.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;— This is a parody of a scene from #Prometheus, source: IMDB comment.&lt;/p&gt;</summary><category term="prometheus"></category><category term="failure"></category><category term="movie"></category><category term="parody"></category></entry><entry><title>Compiling Python Extension Modules on Mac OSX 10.6</title><link href="http://yuce.me/compiling-python-extension-modules-on-mac-osx-106.html" rel="alternate"></link><updated>2011-05-27T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2011-05-27:compiling-python-extension-modules-on-mac-osx-106.html</id><summary type="html">&lt;p&gt;If you get the following error when you are compiling a Python C extension module in Mac OSX 10.6:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/gcc/darwin/ppc/as or /usr/bin/../local/libexec/gcc/darwin/ppc/as) for architecture ppc not installed
Installed assemblers are:
/usr/bin/../libexec/gcc/darwin/x86_64/as for architecture x86_64
/usr/bin/../libexec/gcc/darwin/i386/as for architecture i386
spammodule.c:63: fatal error: error writing to -: Broken pipe compilation terminated.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run setup.py as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ARCHFLAGS=&amp;quot;-arch i386 -arch x86_64&amp;quot; python setup.py build
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="mac"></category><category term="osx 10.6"></category><category term="tricks"></category></entry><entry><title>Installing Flash on Open Solaris snv_132</title><link href="http://yuce.me/installing-flash-on-open-solaris-snv_132.html" rel="alternate"></link><updated>2010-02-16T00:00:00+02:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2010-02-16:installing-flash-on-open-solaris-snv_132.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;SUNWmlib&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;Save &lt;code&gt;flash_player_10_solaris.x86.tar.gz&lt;/code&gt; from &lt;a href="http://get.adobe.com/flashplayer/"&gt;http://get.adobe.com/flashplayer/&lt;/a&gt; to &lt;code&gt;~/Downloads&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open a terminal and execute the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd ~/Downloads
tar xjvf flash_player_10_solaris_x86.tar.bz2
pfexec cp ~/Downloads/flash_player_10_solaris_r42_34_x86/libflashplayer.so /usr/lib/firefox/plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart Firefox&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="open solaris"></category><category term="flash"></category><category term="firefox"></category></entry><entry><title>Go Sample: Link Checker</title><link href="http://yuce.me/go-sample-link-checker.html" rel="alternate"></link><updated>2009-11-14T00:00:00+02:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2009-11-14:go-sample-link-checker.html</id><summary type="html">&lt;p&gt;You should have heard about &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt;, Google's new language.
To be honest, it is one of the ugliest languages I've ever used (&lt;em&gt;I mean among the ones not designed to be ugly&lt;/em&gt;); but it's interesting enough, and I decided to teach myself some.&lt;/p&gt;
&lt;p&gt;Here's the result of a few hrs of reading, searching, coding, reading again and coding: an (almost) port of Josh Marshall's &lt;a href="http://blog.joshmarshall.org/2009/11/url-checker/"&gt;Python URL Link Checker&lt;/a&gt;.
It doesn't support checking local files, but has a nice &lt;code&gt;-v&lt;/code&gt; switch which lets you see all processed URLs.
So far, programming Go felt a bit like programming C++.
Also, Go links the code statically at the moment, which results in an executable of size 1.2MB for 64bit Linux.
(&lt;em&gt;DISCLAIMER: the following program is a toy, don't use it for anything serious&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bytes&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;container/vector&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;// from Go tutorial&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// reallocate&lt;/span&gt;
        &lt;span class="c1"&gt;// Allocate double what&amp;#39;s needed, for future growth.&lt;/span&gt;
        &lt;span class="nx"&gt;newSlice&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Copy data (could use bytes.Copy()).&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;newSlice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newSlice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;get_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// http.Get doesn&amp;#39;t work well without a slash at the end&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;buf&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;rlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EOF&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;rlen&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;get_urls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;link_re&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`http://[^ &amp;lt;&amp;gt;&amp;quot;&amp;#39;()]+`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;link_re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AllMatchesString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;check_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TrimSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// using GET instead of HEAD, since Go has a Get function&lt;/span&gt;
    &lt;span class="c1"&gt;// and we just need the response code&lt;/span&gt;
    &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// parse command line arguments&lt;/span&gt;
    &lt;span class="nx"&gt;isVerbose&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Display processed URLs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NArg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: checkurls [-v] URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;checkedUrl&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Searching for URLs [%s]\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkedUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;codes&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StringVector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;get_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkedUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;get_urls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Checking %d URLs...\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;check_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="c1"&gt;// if code wasn&amp;#39;t seen before, create a vector for it in codes&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewStringVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;codes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;isVerbose&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[%3d] %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\nResults&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=======&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;codes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;There were %d %ds.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;399&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;* %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;At&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="go"></category><category term="link checker"></category></entry><entry><title>Getting the Current Module in Python</title><link href="http://yuce.me/getting-the-current-module-in-python.html" rel="alternate"></link><updated>2009-10-15T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2009-10-15:getting-the-current-module-in-python.html</id><summary type="html">&lt;p&gt;Say, you want to insert a function, class or any other object into the current module dynamically.
How can you do that? Of course, you start with getting the module name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, get the module itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, you got the module, now insert something in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can call hello in our module from now on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="tips"></category></entry><entry><title>Merging PDF Files Using Ghostscript</title><link href="http://yuce.me/merging-pdf-files-using-ghostscript.html" rel="alternate"></link><updated>2009-10-14T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2009-10-14:merging-pdf-files-using-ghostscript.html</id><summary type="html">&lt;p&gt;If you have to merge PDF files, you need no other than Ghostscript (which is installed by default with many Linux distributions).
Here's the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=firstANDsecond.pdf -dBATCH first.pdf second.pdf
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pdf"></category><category term="ghostscript"></category><category term="tips"></category></entry><entry><title>PySWIP: Facts and Rules</title><link href="http://yuce.me/pyswip-facts-and-rules.html" rel="alternate"></link><updated>2009-10-08T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2009-10-08:pyswip-facts-and-rules.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/pyswip/"&gt;PySWIP&lt;/a&gt; is a Python module which enables accessing &lt;a href="http://www.swi-prolog.org/"&gt;SWI-Prolog&lt;/a&gt;'s foreign language interface using our beloved computer language.
Here's a small tutorial on adding facts and rules to prolog knowledgebase.&lt;/p&gt;
&lt;p&gt;First, adding facts and rules, based on examples in a &lt;a href="http://www.doc.gold.ac.uk/~mas02gw/prolog_tutorial/prologpages/rules.html"&gt;Prolog tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyswip&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Prolog&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Prolog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# something is fun if it is a car and it is red.&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(fun(X) :- red(X), car(X))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# facts...&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car(vw_beatle)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car(ferrari)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car(hyundai)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bike(harley_davidson)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;red(ferrari)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;red(vw_beatle)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;blue(hyundai)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Find all cars in the knowledgebase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;car(Which)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outputs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Which&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vw_beatle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Which&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ferrari&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Which&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hyundai&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Find all fun things:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;fun(What)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outputs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;What&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vw_beatle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;What&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ferrari&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty easy, huh? ;) There are more complex Prolog examples in &lt;a href="http://code.google.com/p/pyswip/downloads/list"&gt;PySWIP source distribution&lt;/a&gt;, including a sudoku solver.&lt;/p&gt;</summary><category term="python"></category><category term="prolog"></category><category term="pyswip"></category></entry><entry><title>Getting the Currently Playing Song Info on Amarok via DCOP</title><link href="http://yuce.me/getting-the-currently-playing-song-info-on-amarok-via-dcop.html" rel="alternate"></link><updated>2009-08-13T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2009-08-13:getting-the-currently-playing-song-info-on-amarok-via-dcop.html</id><summary type="html">&lt;p&gt;Here's a sample application for using DCOP with Python.
Needed to install &lt;a href="http://packages.debian.org/search?keywords=python-dcop"&gt;python-dcop&lt;/a&gt; on Debian.
It works on KDE 3.5 with Amarok 1.4 (&lt;em&gt;won't work on KDE 4&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydcop&lt;/span&gt;

&lt;span class="n"&gt;playerService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pydcop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DCOPObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;amarok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;player&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;playerService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
   &lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;playerService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
   &lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;playerService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(artist)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(title)s&lt;/span&gt;&lt;span class="s"&gt; (&lt;/span&gt;&lt;span class="si"&gt;%(album)s&lt;/span&gt;&lt;span class="s"&gt;)&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;kdcop&lt;/strong&gt; is a great application to discover DCOP services.&lt;/p&gt;
&lt;p&gt;I've posted a slightly extended version of this entry to &lt;a href="http://code.activestate.com/recipes/576878/"&gt;Active State Python Cookbook&lt;/a&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="DCOP"></category><category term="amarok"></category><category term="KDE"></category></entry><entry><title>Ctypes Strings</title><link href="http://yuce.me/ctypes-strings.html" rel="alternate"></link><updated>2007-05-28T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2007-05-28:ctypes-strings.html</id><summary type="html">&lt;p&gt;I've written bulk of &lt;a href="http://code.google.com/p/pyswip/"&gt;PySWIP&lt;/a&gt; last summer, it is based on Nathan Denny's &lt;code&gt;proolog.py&lt;/code&gt;.
This is the first project that I used &lt;a href="http://starship.python.net/crew/theller/ctypes/"&gt;ctypes&lt;/a&gt;, a fantastic package which allows calling C functions from dynamic libraries that I use to link &lt;code&gt;libpl.so&lt;/code&gt; (&lt;em&gt;Linux&lt;/em&gt;) or &lt;code&gt;libpl.dll&lt;/code&gt; (&lt;em&gt;Windows&lt;/em&gt;) of &lt;a href="http://www.swi-prolog.org/"&gt;SWI-Prolog&lt;/a&gt;.
One of the difficulties I had back then was finding the corresponding ctypes code for &lt;code&gt;PL_get_chars&lt;/code&gt; which is defined at &lt;code&gt;SWI-Prolog.h&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PL_EXPORT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;PL_get_chars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;term_t&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use that function in &lt;code&gt;queryGenerator&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c_char_p&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;maxsubresult&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;PL_get_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swipl_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;swipl_head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;swipl_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;PL_get_chars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swipl_head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CVT_ALL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;CVT_WRITE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BUF_RING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bindings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cstr2pystr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And, &lt;code&gt;cstr2pystr&lt;/code&gt; is a home-madePython function to convert from a C-string to a Python string in an awful way ;)&lt;/p&gt;
&lt;p&gt;That was until I've seen this &lt;a href="http://www.pererikstrandberg.se/blog/index.cgi?page=PythonCansiCombo"&gt;article&lt;/a&gt; in the &lt;a href="http://www.pererikstrandberg.se/blog/"&gt;blog&lt;/a&gt; of a good person called Erik Strandberg.
His article is about using ctypes, and especially using ctypes types which inspired me to write the code below (knowing that a function called &lt;code&gt;addressof&lt;/code&gt; existed helped much!), thanks Erik :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c_char_p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;MAXSTR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;PL_get_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swipl_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;swipl_head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;swipl_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;PL_get_chars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swipl_head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addressof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;CVT_ALL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;CVT_WRITE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BUF_RING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bindings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="ctypes"></category><category term="prolog"></category><category term="pyswip"></category></entry><entry><title>SEND + MORE = MONEY</title><link href="http://yuce.me/send-more-money.html" rel="alternate"></link><updated>2007-05-27T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2007-05-27:send-more-money.html</id><summary type="html">&lt;p&gt;Finding valid and distinct integers for digits S, E, N, D, M, O, R and Y in the equation SEND + MORE = MONEY is a classical constraint programming problem.
Here's the slightly modified version of the sample program at &lt;a href="http://en.wikipedia.org/wiki/Constraint_programming"&gt;Wikipedia constraint programming entry&lt;/a&gt; for &lt;a href="http://www.swi-prolog.org/"&gt;SWI-Prolog&lt;/a&gt; using clp library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:-&lt;/span&gt; &lt;span class="nf"&gt;use_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;clp/bounds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;

&lt;span class="nf"&gt;sendmore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:-&lt;/span&gt;
   &lt;span class="nv"&gt;Digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nv"&gt;Digits&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0..9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="s-Atom"&gt;#\=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="s-Atom"&gt;#\=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;all_different&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Digits&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;D&lt;/span&gt;
              &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;O&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;R&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;E&lt;/span&gt;
   &lt;span class="s-Atom"&gt;#=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;M&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;O&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nf"&gt;label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Digits&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's what happens when we load the code and run &lt;code&gt;sendmore&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s-Atom"&gt;?-&lt;/span&gt; &lt;span class="nf"&gt;consult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;money.pl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="c1"&gt;%   library(clp/clp_events) compiled into clp_events 0.00 sec, 2,948 bytes&lt;/span&gt;
&lt;span class="c1"&gt;%  library(clp/bounds) compiled into bounds 0.03 sec, 90,992 bytes&lt;/span&gt;
&lt;span class="c1"&gt;% money2.pl compiled 0.03 sec, 91,812 bytes&lt;/span&gt;

&lt;span class="nv"&gt;Yes&lt;/span&gt;
&lt;span class="s-Atom"&gt;?-&lt;/span&gt; &lt;span class="nf"&gt;sendmore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;No&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, 9567 + 1085 = 10652.
AFAI remember, there was a similar question asked to Google's candidate software engineers, which was &lt;code&gt;WWW + DOT = COM&lt;/code&gt;.
Well, you now know the answer ;)
I'll include both examples for my &lt;a href="http://code.google.com/p/pyswip/"&gt;PySWIP&lt;/a&gt; Python package which enables to query SWI-Prolog from Python.&lt;/p&gt;</summary><category term="send more money"></category><category term="sendmory"></category><category term="constraint programming"></category><category term="prolog"></category></entry><entry><title>Shameful Past</title><link href="http://yuce.me/shameful-past.html" rel="alternate"></link><updated>2005-10-24T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-10-24:shameful-past.html</id><summary type="html">&lt;p&gt;A few hours ago, when I was dealing with my thesis, I've come up with a Python function that constructs a tour for a given &lt;a href="http://www.tsp.gatech.edu/"&gt;TSP&lt;/a&gt; instance using the &lt;a href="http://en.wikipedia.org/wiki/Nearest_neighbour_algorithm"&gt;nearest neighbor heuristic&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nearestneighbor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dists&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;tour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
   &lt;span class="n"&gt;candy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
   &lt;span class="n"&gt;candy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;tour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;dists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;candy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;candy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tour&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not too bad...
Then I dig into old Python code that I wrote last year, the times when I was quitting C++ and beginning to use Python; and find this piece of code that consists of a class named &lt;code&gt;Nearestneighbor&lt;/code&gt; doing (almost) the same thing as the function above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Nearestneighbor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dists&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dists&lt;/span&gt;
       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;startcity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;startcity&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startcity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rnd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startcity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startcity&lt;/span&gt;

       &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startcity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startcity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ndist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxint&lt;/span&gt;  &lt;span class="c"&gt;# nearest :) distance&lt;/span&gt;
            &lt;span class="n"&gt;nindex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c"&gt;# nearest city&amp;#39;s index&lt;/span&gt;
            &lt;span class="n"&gt;pcity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tour&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# previous city&lt;/span&gt;
            &lt;span class="n"&gt;ndist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pcity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nindex&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dists&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pcity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ndist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;nindex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
                    &lt;span class="n"&gt;ndist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dist&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tour&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nindex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nindex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, this is definitely not my favorite piece of Python code ;-)&lt;/p&gt;</summary><category term="python"></category><category term="nearest neighbor"></category></entry><entry><title>Freeeze for Marvin3</title><link href="http://yuce.me/freeeze-for-marvin3.html" rel="alternate"></link><updated>2005-10-17T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-10-17:freeeze-for-marvin3.html</id><summary type="html">&lt;p&gt;Today, I added a keyword called &lt;em&gt;freeze&lt;/em&gt; to Marvin3.
Basically, when called inside a routine, it pops the top element from the stack and replaces routine's code with a word that pushes that value onto the stack.
This way we can create a &lt;em&gt;write-once&lt;/em&gt; routine, which is similar to C#'s &lt;code&gt;readonly&lt;/code&gt; modifier (&lt;em&gt;value is allowed to be set once&lt;/em&gt;).
Consider the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:YOUR-NUMBER input int freeze ;

&amp;quot;Enter a number:&amp;quot; prints YOUR-NUMBER
YOUR-NUMBER &amp;quot; is a nice number!&amp;quot; cat println
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that, although &lt;code&gt;YOUR-NUMBER&lt;/code&gt; is a routine, when called, it just pushes the same value determined when it is first called.&lt;/p&gt;
&lt;p&gt;Here is a more complex one. The following set of class and routines implement a generator that returns subsequent numbers starting from 1 (&lt;em&gt;then 2, 3, ...&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@__generate 0 !n [%n incr ^n] dup ;
:_generate __generate freeze ;
:generate _generate call ;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Python equivalent is (although using generators would be better):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_generate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="marvin3"></category></entry><entry><title>99 Bottles of Beer in Marvin3</title><link href="http://yuce.me/99-bottles-of-beer-in-marvin3.html" rel="alternate"></link><updated>2005-09-29T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-09-29:99-bottles-of-beer-in-marvin3.html</id><summary type="html">&lt;p&gt;How to write 99 bottles of beer in Marvin3?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:bottles dup dup 1 &amp;gt; [&amp;quot; bottles&amp;quot;] [&amp;quot; bottle&amp;quot;] ifte cat ;

:sing
    bottles dup &amp;quot; of beer on the wall,&amp;quot; cat println
    &amp;quot; of beer. &amp;quot; cat println
    &amp;quot;Take one down, pass it around.&amp;quot; println ;

:theend  &amp;quot;No more beer left.&amp;quot; println ;

:beers  [dup 0 &amp;gt;] [sing decr] while theend eat ;

# start singing
99 beers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also you may check &lt;a href="/99-bottles-of-beer-on-the-wall.html"&gt;a previous post&lt;/a&gt; for &lt;em&gt;the original&lt;/em&gt; Marvin.
Other languages? &lt;a href="http://www.westnet.com/mirrors/99bottles/beer.html"&gt;99 Bottles of Beer on the Wall&lt;/a&gt; lists many.
See &lt;a href="http://en.wikipedia.org/wiki/99_Bottles_of_Beer"&gt;99 Bottles of Beer on Wikipedia&lt;/a&gt;.&lt;/p&gt;</summary><category term="marvin3"></category><category term="marvin"></category><category term="99 bottles"></category></entry><entry><title>Marvin3 is launched</title><link href="http://yuce.me/marvin3-is-launched.html" rel="alternate"></link><updated>2005-09-27T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-09-27:marvin3-is-launched.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Marvin3 is a new cross-platform stack-based language developed in Python.
Marvin3 features object-oriented-programming, anonymous routines, eager lists, variables, lexical scope, combinators and support for modules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is from my &lt;a href="http://sourceforge.net/projects/marvin3/"&gt;Marvin3 project home&lt;/a&gt;.
Marvin has evolved into Marvin3 and is becoming ready to be tried by the audience.
In order to make it better known, and because it is free software, I requested a SourceForge account yesterday, and to my surprise my request was approved in a couple of hours (&lt;em&gt;while I was led to believe that it would take two days!!!&lt;/em&gt;).
Well, I am happy for that, and I released Marvin3 0.0.6 which has some way to go; but it is still somewhat usable (or triable???).&lt;/p&gt;
&lt;p&gt;This release of Marvin3 includes the interpreter command-line, as well as a GUI called Mice (&lt;em&gt;Marvin3 Interactive Command Environment&lt;/em&gt;).
If you want to have a look, be sure you have &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt; 2.4.1 and &lt;a href="http://www.wxpython.org"&gt;wxPython&lt;/a&gt; 2.6.1 (&lt;em&gt;if you intend to use the Mice GUI&lt;/em&gt;).
Mice GUI seems to work OK with WinXP (&lt;em&gt;with some quirks&lt;/em&gt;) but having problems with GNOME 2.10 (on Ubuntu 5.04).
Most probably, this is because of the old version of wxPython shipped with Ubuntu 5.04.
Later I will post a Win32 binary release and try to release an Debian/Ubuntu deb.
Anyway, you can download Marvin3 0.0.6 from &lt;a href="http://sourceforge.net/projects/marvin3/"&gt;Marvin3 project home&lt;/a&gt;.
The zip file has a few sample Marvin3 programs (&lt;em&gt;but it is ridiculously few, next release will be serious about this&lt;/em&gt;), so you can try them and even tell me your opinions.&lt;/p&gt;
&lt;p&gt;That's all folks (for now)...&lt;/p&gt;</summary><category term="marvin3"></category><category term="marvin"></category></entry><entry><title>Ubuntu is Great</title><link href="http://yuce.me/ubuntu-is-great.html" rel="alternate"></link><updated>2005-09-14T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-09-14:ubuntu-is-great.html</id><summary type="html">&lt;p&gt;Last week, I received 20 (1 install + 1 live) Ubuntu Linux 5.04 (Hoary Hedgehog) CDs &lt;em&gt;FOR FREE&lt;/em&gt; (details will follow).
Of course in no time I installed it. I have to say that Hoary rocks!
I was using Warthy before, and this new release fixes the few problems Warthy had (e.g., my Kingston USB-disk is now recognized, and my computer turns off when I log out.)&lt;/p&gt;
&lt;p&gt;The new version of Ubuntu, &lt;a href="http://www.ubuntu.com/newsitems/5.10preview"&gt;Breezy Badger&lt;/a&gt; is on its way out but let me write some of the features of Hoary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.python.org/2.4.1/"&gt;Python 2.4.1&lt;/a&gt;, the latest version for now.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gnome.org/start/2.10/"&gt;GNOME 2.10&lt;/a&gt;, not the latest version (&lt;em&gt;2.12 will be included in Breezy&lt;/em&gt;) but works perfectly.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mozilla.org/products/firefox/"&gt;Firefox 1.02&lt;/a&gt;, not the latest version but it is updated easily in Windows Update style.&lt;/li&gt;
&lt;li&gt;Synaptic package manager that makes install/update/uninstall a snap.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;much more...&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, after installation of the base system, I ran Synaptic and downloaded other software I frequently use, such as &lt;a href="http://wxpython.org"&gt;wxPython&lt;/a&gt; for GUI programming with Python (&lt;em&gt;2.5.3.2pre is the latest in the repository though, I hope 2.6.1.0 will be available soon&lt;/em&gt;),
&lt;a href="http://www.mozilla.org/products/thunderbird/"&gt;Thunderbird&lt;/a&gt; (1.06) for reading my mail (&lt;em&gt;Evolution 2.2 is installed by default&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Now the &lt;em&gt;FOR FREE&lt;/em&gt; part... Most Linux distros are downloadable for free, but Ubuntu won't charge anything even sending the CDs to you in reasonable quantities.
There are people who asked for and received 100 CDs! I was not greedy that much however, so I only asked for 20.
If you are nearby &lt;a href="http://www.emu.edu.tr"&gt;EMU&lt;/a&gt; &lt;a href="http://cmpe.emu.edu.tr"&gt;Department of Computer Engineering&lt;/a&gt; room 124, you may take one free from me.
Or you may order some CDs for yourself at &lt;a href="http://shipit.ubuntulinux.org/"&gt;Ubuntu shipit&lt;/a&gt;.
Don't forget to read the &lt;a href="http://www.ubuntulinux.org/support/documentation/faq/shipit/"&gt;FAQ&lt;/a&gt; though.
(&lt;em&gt;Note: The CD distribution is closed until the release of Breezy, which will be releason on October.&lt;/em&gt;)&lt;/p&gt;</summary><category term="ubuntu"></category><category term="hoary hedgehog"></category><category term="linux"></category><category term="FOSS"></category></entry><entry><title>The Gods Made Heavy Metal in Istanbul</title><link href="http://yuce.me/the-gods-made-heavy-metal-in-istanbul.html" rel="alternate"></link><updated>2005-09-13T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-09-13:the-gods-made-heavy-metal-in-istanbul.html</id><summary type="html">&lt;p&gt;The eminent heavy metal band &lt;a href="http://www.manowar.com/"&gt;Manowar&lt;/a&gt; was in Istanbul, Turkey on August 6th 2005.
The concert was at Yedikule (7 Towers) Dungeons, the perfect place for it.
It was also raining and thundering when the band was playing &lt;em&gt;Hail and Kill&lt;/em&gt;.
The show was in one word, &lt;strong&gt;PERFECT!&lt;/strong&gt;, we kept on screaming and singing the songs at the top of our voice during the concert (&lt;em&gt;well, I couldn't speak for two days afterwards :)&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;One of the most important events of the concert was, Joey DeMaio's announcement in which he said, "Manowar's hatred against Turks is a LIE!"; he even kissed the Turkish flag, and said, "This is the color of heavy metal" , and later, "heavy metal was born here".
Damn right! Below is a photo of DeMaio with the Turkish flag:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manowar in Istanbul" src="/images/manowar_istanbul.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The concert was the main event of the Rock the Nations 3 Open-Air Festival.
Manowar promised to come back to Turkey next year; be sure to be there!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LONG LIVE HEAVY METAL!!!&lt;/strong&gt;&lt;/p&gt;</summary><category term="Manowar"></category><category term="heavy metal"></category><category term="Istanbul"></category><category term="concert"></category></entry><entry><title>Generating All Strings of a Given Alphabet</title><link href="http://yuce.me/generating-all-strings-of-a-given-alphabet.html" rel="alternate"></link><updated>2005-06-10T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-06-10:generating-all-strings-of-a-given-alphabet.html</id><summary type="html">&lt;p&gt;For a recent research project, I had to write a function that generates all the strings of a given alphabet.
It was (as always) very easy to figure it out in Python, only 5 minutes; below is the code (with modifications, I've polished the idea a bit):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;allstrings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Find the list of all strings of &amp;#39;alphabet&amp;#39; of length &amp;#39;length&amp;#39;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;[:]]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, suppose you want the possible strings of length 4 of alphabet {1,2,3}; then just write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;allstrings&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here is the Haskell version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;allstrings&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
   &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allstrings&lt;/span&gt; &lt;span class="n"&gt;alphabet&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="strings"></category><category term="combination"></category></entry><entry><title>Accumulator Generator</title><link href="http://yuce.me/accumulator-generator.html" rel="alternate"></link><updated>2005-04-26T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-04-26:accumulator-generator.html</id><summary type="html">&lt;p&gt;In his &lt;a href="http://www.paulgraham.com/accgen.html"&gt;accumulator generator&lt;/a&gt; page, Paul Graham compares several languages to solve a particular problem that is quoted below
(apparently, he has chosen this example in favor of his new Lisp-like language &lt;a href="http://www.paulgraham.com/arc.html"&gt;Arc&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem: Write a function foo that takes a number n and returns a function that takes a number i, and returns n incremented by i.&lt;/p&gt;
&lt;p&gt;Note: (a) that's number, not integer, (b) that's incremented by, not plus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My trial with Marvin was a failure, and could not satisfy all the 5 requirements given &lt;a href="http://www.paulgraham.com/accgensub.html"&gt;here&lt;/a&gt;.
But now with Marvin2 (a rewrite of the language) this can be accomplished with the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@foo !n [ %n + ^n ] ;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice... You can then run the sample code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1 &amp;#39;foo new !x
5 \x
3 &amp;#39;foo new
2.3 \x println
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the result is 8.3, as expected.&lt;/p&gt;</summary><category term="marvin"></category><category term="accumulator generator"></category><category term="Paul Graham"></category></entry><entry><title>99 Bottles of Beer on the Wall</title><link href="http://yuce.me/99-bottles-of-beer-on-the-wall.html" rel="alternate"></link><updated>2005-04-16T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-04-16:99-bottles-of-beer-on-the-wall.html</id><summary type="html">&lt;p&gt;The following is one of the ways to do &lt;em&gt;99 bottles of beer&lt;/em&gt; in Marvin.
If you don't know what I mean, check &lt;a href="http://www.westnet.com/mirrors/99bottles/beer.html"&gt;99 Bottles of Beer on the Wall&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;99 ^beers
{
%beers 0 &amp;gt;
iftrue
    &amp;quot; bottle(s) of beer&amp;quot; &amp;amp; dup &amp;quot; on the wall,&amp;quot; &amp;amp; println
    &amp;quot;.&amp;quot; &amp;amp; println
    &amp;quot;Take one down, pass it around,&amp;quot; println
    %beers -- ^beers
    repeat
}

&amp;quot;No more beers left.&amp;quot; println
&lt;/pre&gt;&lt;/div&gt;</summary><category term="marvin"></category><category term="99 bottles"></category></entry><entry><title>Infix Comparison in Marvin</title><link href="http://yuce.me/infix-comparison-in-marvin.html" rel="alternate"></link><updated>2005-04-16T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-04-16:infix-comparison-in-marvin.html</id><summary type="html">&lt;p&gt;Here is a sample Marvin code that converts an infix expression into postfix.
I have also posted this one to the &lt;a href="http://factor.sourceforge.net/wiki/index.php?InfixComparison"&gt;InfixComparison&lt;/a&gt; page of &lt;a href="http://factor.sourceforge.net/wiki/index.php"&gt;Concatenative Languages Wiki&lt;/a&gt;.
(&lt;em&gt;Note from the future: Sadly, these links are broken.&lt;/em&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# infix.mar | Converts an infix expression into postfix

# This implementation uses the global variable space as a hash-table
# for operator precedence.

&amp;quot;listop forth dequeop&amp;quot; use

@|&amp;gt; globs &amp;amp; pushfrom ;

@string dfront NONE =
    { iftrue dpushf }
    { else
        dpopf 2dup |&amp;gt;
        { iftrue swap dpushf }
        { else dpushf dpushf }
    } ;

@list NONE dpushf __postfix_rec
    {
    dfront NONE =
    iffalse
        dpopf
        repeat
    } { else dpopf eat } ;

@number ;

@postfix NONE dpushf __postfix_rec dpopfall ;
@__postfix_rec [ dup type call ] lmap ;


# define the hash-table for operator precedence
FALSE ^++ ^+- ^-+ ^-- ^*+ ^*- ^** ^*/ ^/+ ^/- ^/* ://
TRUE ^+* ^+/ ^-* :-/

# try one of the examples:
( ( 2 &amp;#39;* ( ( 3 &amp;#39;/ 2 ) &amp;#39;+ 4 ) ) postfix )
dump  # display the stack
&lt;/pre&gt;&lt;/div&gt;</summary><category term="marvin"></category><category term="infix"></category></entry><entry><title>Infix to Postfix Converter Class in Marvin</title><link href="http://yuce.me/infix-to-postfix-converter-class-in-marvin.html" rel="alternate"></link><updated>2005-04-16T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-04-16:infix-to-postfix-converter-class-in-marvin.html</id><summary type="html">&lt;p&gt;Here is an object oriented version of the infix to postfix converter written in Marvin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# infixoop.mar | Converts an infix expression into postfix

# This implementation uses the object data as a hash-table
#    for operator precedence.

&amp;quot;listop forth dequeop&amp;quot; use

@@Infix
    @new  # define the hash-table for operator precedence
        FALSE ^++ ^+- ^-+ ^-- ^*+ ^*- ^** ^*/ ^/+ ^/- ^/* ://
        TRUE ^+* ^+/ ^-* :-/ me ;

    @|&amp;gt; &amp;amp; pushfrom ;

    @string dfront NONE =
        { iftrue dpushf }
        { else
            dpopf 2dup me .|&amp;gt;
            { iftrue swap dpushf }
            { else dpushf dpushf }
        } ;

    @list NONE dpushf me .__topostfix_rec
        {
        dfront NONE =
        iffalse
            dpopf
            repeat
        } { else dpopf eat } ;

    @number ;

    @topostfix NONE dpushf me .__topostfix_rec dpopfall ;
    @__topostfix_rec [ dup type callme ] lmap ;
;;

# try one of the examples:
&amp;#39;Infix new :infix
( ( 2 &amp;#39;* ( ( 3 &amp;#39;/ 2 ) &amp;#39;+ 4 ) ) %infix .topostfix )

dump  # display the stack
&lt;/pre&gt;&lt;/div&gt;</summary><category term="marvin"></category><category term="infix"></category><category term="postfix"></category></entry><entry><title>Another Currying Example in Marvin</title><link href="http://yuce.me/another-currying-example-in-marvin.html" rel="alternate"></link><updated>2005-04-12T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-04-12:another-currying-example-in-marvin.html</id><summary type="html">&lt;p&gt;Please see my &lt;a href="/currying-in-marvin.html"&gt;previous post&lt;/a&gt; before if you haven't done so.&lt;/p&gt;
&lt;p&gt;I've quoted David Mertz's article &lt;a href="http://www-106.ibm.com/developerworks/linux/library/l-prog3.html"&gt;Charming Python&lt;/a&gt; in my previous post.
In that article, (besides other things) a &lt;a href="http://www.haskell.org/"&gt;Haskell&lt;/a&gt; function is curryied as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;computation&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then it is &lt;em&gt;filled&lt;/em&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;fillOne&lt;/span&gt;   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computation&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nf"&gt;fillTwo&lt;/span&gt;   &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fillOne&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nf"&gt;fillThree&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fillTwo&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nf"&gt;answer&lt;/span&gt;    &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fillThree&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the answer is 657. The same thing can be done in Marvin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[ swap 2 ** + swap 3 ** + swap 4 ** + ] :computation
[ 1 \computation ] :fillOne
[ 2 \fillOne ] :fillTwo
[ 3 \fillTwo ] :fillThree
5 \fillThree
&lt;/pre&gt;&lt;/div&gt;</summary><category term="marvin"></category><category term="currying"></category></entry><entry><title>Currying in Marvin</title><link href="http://yuce.me/currying-in-marvin.html" rel="alternate"></link><updated>2005-04-12T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2005-04-12:currying-in-marvin.html</id><summary type="html">&lt;p&gt;Yesterday, I figured out a way (which was very obvious) to curry a routine in &lt;em&gt;Marvin&lt;/em&gt;.
First of all, what's currying?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currying is named after the logician Haskell Curry. (...)
The underlying insight of "currying" is that it is possible to treat (almost) every function as a partial function of just one argument.
All that is necessary for currying to work is to allow the return value of functions to themselves be functions, but with the returned functions &lt;em&gt;narrowed&lt;/em&gt; or &lt;em&gt;closer to completion&lt;/em&gt;.
(...) each successive call to a curried return function &lt;em&gt;fills in&lt;/em&gt; more of the data involved in a final computation (data attached to a procedure).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www-106.ibm.com/developerworks/linux/library/l-prog3.html"&gt;Charming Python, Part 3 by David Mertz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OK! So we now know what's currying, how to do it in Marvin?
First, an example in &lt;a href="http://www.swiss.ai.mit.edu/projects/scheme/"&gt;Scheme&lt;/a&gt; taken from the article &lt;a href="http://www.engr.uconn.edu/%7Ejeffm/Papers/curry.html"&gt;Function Currying in Scheme&lt;/a&gt;.
The following defines a &lt;em&gt;curryied&lt;/em&gt; multiplication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then use this to define a function that doubles its argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;double&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we can use "double" just like any other function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;double&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple, isn't it? But currying is a real headache for non-functional languages; even for Python in some extent. Below is how to do it Marvin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[ * ] :times
[ 2 \times ] :double
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To call double, just write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;5 \double
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How elegant and natural, isn't it?&lt;/p&gt;</summary><category term="marvin"></category><category term="currying"></category></entry><entry><title>IEEE NNS 2003 Student Travel Grant Recipients for CEC2003</title><link href="http://yuce.me/ieee-nns-2003-student-travel-grant-recipients-for-cec2003.html" rel="alternate"></link><updated>2003-10-31T00:00:00+02:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2003-10-31:ieee-nns-2003-student-travel-grant-recipients-for-cec2003.html</id><summary type="html">&lt;p&gt;51 applications were received. 20 travel grants are being awarded. For Australian recipients the travel grant will be $350, for all others it will be $800.&lt;/p&gt;
&lt;p&gt;Travel grants of US$800 (outside of Australia):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Yuce Tekol, Eastern Mediterranean University, Turkey&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Feng Xue, Rensselaer Polytechnic Institute, USA&lt;/li&gt;
&lt;li&gt;Yew Jin Lim, National University of Singapore, Singapore&lt;/li&gt;
&lt;li&gt;Ricardo Hoar, University of Calgary, Canada&lt;/li&gt;
&lt;li&gt;Zejun Wu, Wuhan University, China&lt;/li&gt;
&lt;li&gt;Chuan-Kang Ting, University Paderborn, Germany&lt;/li&gt;
&lt;li&gt;Nelis Franken, University of Pretoria, South Africa&lt;/li&gt;
&lt;li&gt;Harry J. Blumenthal, Connecticut College, USA&lt;/li&gt;
&lt;li&gt;Renato Reder Cazangi, State University of Campinas, Brazil&lt;/li&gt;
&lt;li&gt;Konstantinos Parsopoulos, University of Patras, Greece&lt;/li&gt;
&lt;li&gt;Bin Peng, Wayne State University, USA&lt;/li&gt;
&lt;li&gt;Shiori Kaige, Osaka Prefecture University, Japan&lt;/li&gt;
&lt;li&gt;Rene Thomsen, University of Aarhus, Denmark&lt;/li&gt;
&lt;li&gt;Yingjie Yang, National University Of Singapore, Singapore&lt;/li&gt;
&lt;li&gt;Kumarappan N, Anna University, India&lt;/li&gt;
&lt;li&gt;Paavan Mistry, University of Leeds, UK&lt;/li&gt;
&lt;li&gt;Kieun Kim, Syracuse University, USA&lt;/li&gt;
&lt;li&gt;Siang Yew Chong, Multimedia University, Malaysia&lt;/li&gt;
&lt;li&gt;Saravana Kumar Gurunathan, Indian Institute of Technology Kanpur, India&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Travel grant of US$350:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cau (Doan Hoang) Thai, University of New South Wales, Australia&lt;/li&gt;
&lt;/ul&gt;</summary><category term="CEC2003"></category><category term="IEEE"></category></entry><entry><title>Prisoner's Dilemma in IEEE Looking Forward Magazine Fall 2003 Issue</title><link href="http://yuce.me/prisoners-dilemma-in-ieee-looking-forward-magazine-fall-2003-issue.html" rel="alternate"></link><updated>2003-10-28T00:00:00+02:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2003-10-28:prisoners-dilemma-in-ieee-looking-forward-magazine-fall-2003-issue.html</id><summary type="html">&lt;p&gt;&lt;em&gt;To Cooperate or To Defect: That's the Prisoner's Dilemma&lt;/em&gt; is a short article
about &lt;a href="http://en.wikipedia.org/wiki/Prisoner's_dilemma"&gt;prisoner's dilemma&lt;/a&gt; and
&lt;a href="http://en.wikipedia.org/wiki/Genetic_algorithms"&gt;genetic algorithms&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Prisoner’s Dilemma is the most studied game among evolutionary computation researchers.
The game is extremely simple to play: each player has only two choices,
either cooperation or defection. Nevertheless, this simplicity is just deceiving; the
game has very interesting consequences that effected economics, biology and evolutionary
computation.  In this paper, we take a small trip together to explore the
most popular variant of the game:  the iterated prisoner’s dilemma, following the
now classical approach to ”coevolve” strategies for it by using a genetic algorithm.&lt;/p&gt;
&lt;h2&gt;Download&lt;/h2&gt;
&lt;p&gt;Full article is available for &lt;a href="/files/pd_v2.pdf"&gt;download&lt;/a&gt;.&lt;/p&gt;</summary><category term="prisoner's dilemma"></category><category term="genetic algorithms"></category><category term="computational intelligence"></category><category term="IEEE"></category></entry><entry><title>Ants at CEC2003</title><link href="http://yuce.me/ants-at-cec2003.html" rel="alternate"></link><updated>2003-06-10T00:00:00+03:00</updated><author><name>Yuce Tekol</name></author><id>tag:yuce.me,2003-06-10:ants-at-cec2003.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.cs.adfa.edu.au/~rim/CEC2003/Draft-Program.htm"&gt;CEC2003 Program&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Session W2-S04: E: Evolutionary Intelligent Systems
Wednesday, December 10, 10:00AM-12:00PM, Room: CR-4
&lt;em&gt;11:36AM Ants can play prisoner's dilemma [#1151]&lt;/em&gt;
&lt;strong&gt;Yuce Tekol&lt;/strong&gt; and Adnan Acan&lt;/strong&gt;&lt;/p&gt;</summary><category term="CEC2003"></category><category term="congress"></category><category term="AI"></category><category term="computational intelligence"></category><category term="me"></category></entry></feed>